plugins {
    id "dev.architectury.loom" version "1.6-SNAPSHOT"
    id "com.github.johnrengelman.shadow"
    id "io.github.null2264.preprocess"
    id "me.modmuss50.mod-publish-plugin" version "0.3.5"
}

def isForge = project.name.endsWith("forge")
def isNeo = project.name.endsWith("neoforge")
def isFabric = project.name.endsWith("fabric")
def mcVersion
def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
static String stringifyVersion(int ver) {
    return "${(int)(ver/10000)}.${(int)(ver/100)%100}" + (ver%100==0 ? '' : ".${ver%100}")
}
def mcVersionStr = stringifyVersion(mcVersion)
// TODO(addingVersion): Add "-" suffix to support snapshots
def supportedVersionRange = [
        11605: [null, "1.16.5"],
        11802: [null, "1.18.2"],
        11902: ["1.19-", "1.19.2"],
        12001: ["1.20-", "1.20.1"],
        12002: ["1.20.2-", "1.20.4"],
        12005: ["1.20.5-", null],
][mcVersion]

preprocess {
    vars.put("MC", mcVersion)
    vars.put("FABRIC", isFabric ? 1 : 0)
    vars.put("FORGE", isForge ? 1 + (isNeo ? 1 : 0) : 0)

    patternAnnotation.set("io.github.null2264.gradle.Pattern")
}

repositories {
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://api.modrinth.com/maven/" }
    maven { url = "https://cursemaven.com/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://maven.neoforged.net/releases" }
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
    mavenLocal()
}

archivesBaseName = project.archives_base_name

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
project.version = project.mod_version + "+${mcVersionStr}" + (buildNumber != null ? "b${buildNumber}-" : "-") + project.version_stage + (isFabric ? "-fabric" : (isNeo ? "-neoforge" : "-forge"))

group = project.maven_group

loom {
    silentMojangMappingsLicense()

    runConfigs.configure {
        client {
            runDir = "../../run/client"
            ideConfigGenerated = true
        }
        server {
            runDir = "../../run/server"
            ideConfigGenerated = true
        }
    }

    if (!isFabric && !isNeo) {
        forge {
            mixinConfigs = [
                    "cobblegen.mixins.json"
            ]
        }
    }
}

configurations {
    shade
    modImplementation.extendsFrom(shade)
}

dependencies {
    // TODO(addingVersion): For snapshots
    def mc = [
            12005: isFabric ? "24w14a" : "24w13a",
    ]
    minecraft "com.mojang:minecraft:${mc[mcVersion] ?: mcVersionStr}"

    mappings loom.officialMojangMappings()

    if (isFabric) {
        if (mcVersion <= 11902 && project.recipe_viewer == "rei")
            modImplementation "net.fabricmc:fabric-loader:0.14.14"  // I don't get it, REI hate 0.14.21 in 1.19.2 or lower, wtf?
        else if (mcVersion <= 12001)
            modImplementation "net.fabricmc:fabric-loader:0.14.21"
        else
            modImplementation "net.fabricmc:fabric-loader:0.15.7"

        // For testing
        if (project.recipe_viewer != "none" && mcVersion > 11605)
            // TODO(addingVersion)
            modLocalRuntime("net.fabricmc.fabric-api:fabric-api:" + [
                    11605: "0.42.0+1.16",
                    11802: "0.76.0+1.18.2",
                    11902: "0.76.0+1.19.2",
                    11904: "0.83.0+1.19.4",
                    12001: "0.83.1+1.20.1",
                    12002: "0.89.0+1.20.2",
                    12005: "0.96.2+1.20.5",
            ][mcVersion])
    } else {
        if (!isNeo) {
            forge "net.minecraftforge:forge:${mcVersionStr}-" + [
                    11605: "36.2.41",
                    11802: "40.2.9",
                    11902: "43.2.14",
                    11904: "45.1.0",
                    12001: "47.0.3",
                    12002: "48.0.13",
            ][mcVersion]
        } else {
            // TODO(addingVersion)
            neoForge "net.neoforged:neoforge:" + [
                    12002: "20.2.86",
                    12005: "20.5.0-alpha.${mc[mcVersion]}.+",
            ][mcVersion]
        }
    }

    shade("blue.endless:jankson:${project.jankson_version}")
    if (!isFabric)
        forgeRuntimeLibrary("blue.endless:jankson:${project.jankson_version}")

    shade("systems.manifold:manifold-ext-rt:${project.manifold_version}")
    if (!isFabric)
        forgeRuntimeLibrary("systems.manifold:manifold-ext-rt:${project.manifold_version}")
    annotationProcessor("systems.manifold:manifold-ext:${project.manifold_version}")
    testAnnotationProcessor("systems.manifold:manifold-ext:${project.manifold_version}")

    // Don't wanna deal with these atm
    if (mcVersion > 11605) {
        // These act like a dummy, technically only here to provide their modules/packages
        if (isFabric) {
            modCompileOnly("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
            modCompileOnly("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
        } else {
            modCompileOnly("com.simibubi.create:create-1.18.2:0.5.1.e-318:slim") { transitive = false }
        }

        // <- EMI
        if (mcVersion <= 11802 && isFabric) {
            modCompileOnly("dev.emi:emi:0.7.3+${mcVersionStr}:api")
            if (project.recipe_viewer == "emi")
                modLocalRuntime("dev.emi:emi:0.7.3+${mcVersionStr}")
        } else {
            // TODO(addingVersion): EMI
            def suffix = [
                    11902: "1.19.2",
                    11904: "1.19.4",
                    12001: "1.20.1",
                    12002: "1.20.2",
                    12005: "1.20.2", // FIXME: Use 1.20.5 version of EMI
            ]
            // EMI support multiple platform since 1.0.0
            // EMI seems to also skip 1.19 and 1.19.1
            modCompileOnly("dev.emi:emi-${isFabric ? "fabric" : "forge"}:${project.emi_version}+${mcVersion >= 11902 ? (suffix[mcVersion] ?: "1.20.2") : "1.19.2"}:api")
            if (project.recipe_viewer == "emi" && suffix[mcVersion] != null)
                modLocalRuntime("dev.emi:emi-${isFabric ? "fabric" : "forge"}:${project.emi_version}+${mcVersion >= 11902 ? suffix[mcVersion] : "1.19.2"}")
        }
        // EMI ->

        // <- REI
        // TODO(addingVersion): REI
        def reiVersions = [
                11802: "8.3.618",
                11902: "9.1.619",
                11904: "11.0.621",
                12001: "12.0.625",
                12002: "13.0.685",
                12005: isFabric ? "14.0.689-alpha" : null,
        ]
        if (isFabric)
            modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${reiVersions[mcVersion] ?: "13.0.685"}")
        // NOTE: I need the full package for Forge(-like) loaders since for whatever reason @REIPluginClient
        // is not included in API, thanks REI
        else if (!isNeo)
            modCompileOnly("me.shedaniel:RoughlyEnoughItems-forge:${(reiVersions[mcVersion] ?: "13.0.685")}")
        else
            modCompileOnly("me.shedaniel:RoughlyEnoughItems-neoforge:${(reiVersions[mcVersion] ?: "13.0.685")}")
        if (mcVersion >= 12002) {  // FIXME: Not sure why it's not included
            modCompileOnly("me.shedaniel.cloth:basic-math:0.6.1")
            modCompileOnly("dev.architectury:architectury:11.1.13")
        }
        if (project.recipe_viewer == "rei" && reiVersions[mcVersion] != null) {
            if (mcVersion == 11902)  // REI's stupid dep bug
                modLocalRuntime("dev.architectury:architectury-fabric:6.5.77")
            modLocalRuntime("me.shedaniel:RoughlyEnoughItems-${isFabric ? "fabric" : "forge"}:${reiVersions[mcVersion]}")
        }
        // REI ->

        // <- JEI
        // TODO(addingVersion): JEI
        def jeiVersions = [
                11802: "10.2.1.1004",
                11902: "11.6.0.1015",
                11904: "13.1.0.13",
                12001: "15.0.0.12",
                12002: "16.0.0.28",
        ]
        def fallbackJeiVer = "16.0.0.28"
        def fallbackJeiMcVer = "1.20.2"
        def jeiMc = [
                12005: fallbackJeiMcVer,
        ]
        modCompileOnly("mezz.jei:jei-${jeiMc[mcVersion] ?: mcVersionStr}-common-api:${jeiVersions[mcVersion] ?: fallbackJeiVer}")
        modCompileOnly("mezz.jei:jei-${jeiMc[mcVersion] ?: mcVersionStr}-${isFabric ? "fabric" : "forge"}-api:${jeiVersions[mcVersion] ?: fallbackJeiVer}")
        if (project.recipe_viewer == "jei" && jeiVersions[mcVersion] != null)
            modLocalRuntime("mezz.jei:jei-${jeiMc[mcVersion] ?: mcVersionStr}-${isFabric ? "fabric" : "forge"}:${jeiVersions[mcVersion]}")
        // JEI ->

        /* FIXME: Broken, somehow
        if (mcVersion == 11802 && isFabric) {
            modLocalRuntime("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7")
            modLocalRuntime("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
            modLocalRuntime("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
        }
         */
    } else {
        // slf4j is not included by MC in 1.16.5
        shade("org.slf4j:slf4j-api:1.7.36")
        shade("org.apache.logging.log4j:log4j-slf4j-impl:2.8.1")
        if (!isFabric) {
            forgeRuntimeLibrary("org.slf4j:slf4j-api:1.7.36")
            forgeRuntimeLibrary("org.apache.logging.log4j:log4j-slf4j-impl:2.8.1")
        }
    }
}

shadowJar {
    zip64 true
    relocate "blue.endless.jankson", "io.github.null2264.shadowed.jankson"
    if (mcVersion <= 11605) {
        relocate "org.slf4j", "io.github.null2264.shadowed.slf4j"
        relocate "org.apache.logging", "io.github.null2264.shadowed.log4j"
    }
    relocate "manifold", "io.github.null2264.shadowed.manifold"
    exclude (isFabric ? "META-INF/mods.toml" : "fabric.mod.json")
    exclude "architectury.common.json"

    configurations = [project.configurations.shade]
    archiveClassifier.set "dev-shade"
}

artifacts {
    archives shadowJar
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile
}

processResources {
    def metadataVersion = "${project.mod_version}-${project.version_stage}"
    def metadataMCVersion =
            supportedVersionRange[0] != null ? (
            (isFabric ? ">=" : "[") +
            supportedVersionRange[0] +
            (supportedVersionRange[1] == null
                    ? (isFabric ? "" : ",)")
                    : ((isFabric ? " <=" : ",") + supportedVersionRange[1] + (isFabric ? "" : "]")))
            ) : (isFabric ? supportedVersionRange[1] : "[${supportedVersionRange[1]}]")
    inputs.property "version", metadataVersion
    inputs.property "mcversion", metadataMCVersion
    filteringCharset "UTF-8"

    filesMatching(isFabric ? "fabric.mod.json" : "META-INF/mods.toml") {
        filter { line -> line.trim().startsWith('//') ? '' : line }  // strip comments
        expand "version": metadataVersion, "mcversion": metadataMCVersion, "forge": (isNeo ? "neoforge" : "forge")
    }
}

def targetJavaVersion = if (mcVersion >= 12005 && isFabric) 21  // FIXME: At the moment we only have access to Fabric for 24w14a
    else if (mcVersion >= 11700) 17
    else 8
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

if (JavaVersion.current() != JavaVersion.VERSION_1_8 &&
        sourceSets.main.allJava.files.any {it.name == "module-info.java"}) {
    tasks.withType(JavaCompile) {
        // if you DO define a module-info.java file:
        options.compilerArgs += ['-Xplugin:Manifold', '--module-path', it.classpath.asPath]
    }
} else {
    tasks.withType(JavaCompile) {
        // If you DO NOT define a module-info.java file:
        options.compilerArgs += ['-Xplugin:Manifold']
    }
}

// TODO(addingVersion)
def mcReleaseVersions = [
        11605: ["1.16.5"],
        11802: ["1.18.2"],
        11902: ["1.19", "1.19.1", "1.19.2"],
        12001: ["1.20", "1.20.1"],
        12002: ["1.20.2", "1.20.3", "1.20.4"],
        12005: ["1.20.5"], // TODO: Still in snapshot
][mcVersion]

def cfSnapshots = [
        12005: ["1.20.5-Snapshot"],
][mcVersion]

def mrSnapshots = [
        12005: ["24w14a"],
][mcVersion]

publishMods {
    file = tasks.remapJar.archiveFile
    displayName = "[${isFabric ? "FABRIC" : (isNeo ? "NEOFORGE" : "FORGE")} MC${mcReleaseVersions[0] + (mcReleaseVersions.size() > 1 ? "+" : "")}] v${project.mod_version}-${project.version_stage}${mcVersion <= 11605 ? " (LITE)" : ""}"
    changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/null2264/CobbleGen/releases) for a changelog"
    version = project.version
    if (isFabric) {
        modLoaders.add("fabric")
        modLoaders.add("quilt")
    } else {
        if (mcVersion <= 12002 && !isNeo)  // No more LexForge, LexForge is too buggy
            modLoaders.add("forge")
        if (mcVersion == 12001 || isNeo)
            modLoaders.add("neoforge")
    }
    if (project.version_stage == "ALPHA")
        type = ALPHA
    else if (project.version_stage == "BETA")
        type = BETA
    else
        type = RELEASE

    var cfToken = System.getenv("CURSEFORGE")
    if (cfToken != null) {
        curseforge {
            accessToken = cfToken
            projectId = project.curseforge_project

            if (cfSnapshots == null) {
                for (final def mcVer in mcReleaseVersions) {
                    minecraftVersions.add(mcVer)
                }
            }

            for (final def mcVer in cfSnapshots) {
                minecraftVersions.add(mcVer)
            }

            embeds {
                slug = "jankson"
            }
        }
    }

    var mrToken = System.getenv("MODRINTH")
    if (mrToken != null) {
        modrinth {
            accessToken = mrToken
            projectId = project.modrinth_project

            if (mrSnapshots == null) {
                for (final def mcVer in mcReleaseVersions) {
                    minecraftVersions.add(mcVer)
                }
            }

            for (final def mcVer in mrSnapshots) {
                minecraftVersions.add(mcVer)
            }
        }
    }
}
