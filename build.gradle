plugins {
    id "dev.architectury.loom" version "1.1-SNAPSHOT"
    id "com.github.johnrengelman.shadow"
    id "com.github.null2264.preprocess"
}

def isFabric = project.name.endsWith("fabric")
def mcVersion
def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
def mcVersionStr = "${(int)(mcVersion/10000)}.${(int)(mcVersion/100)%100}" + (mcVersion%100==0 ? '' : ".${mcVersion%100}")

preprocess {
    patternAnnotation.set("io.github.null2264.gradle.Pattern")
}

repositories {
    maven { url 'https://jitpack.io' }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        name = "Shedaniel Maven"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "CurseMaven"
        url = "https://cursemaven.com"
    }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://maven.tterrag.com/" }
}

archivesBaseName = project.archives_base_name

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
version = project.mod_version + (buildNumber != null ? "+${buildNumber}-" : "-") + project.version_stage

ext.isAlpha = project.version_stage == "ALPHA"
ext.isBeta = project.version_stage == "BETA"

group = project.maven_group

loom {
    silentMojangMappingsLicense()

    runConfigs.configure {
        client {
            runDir = "../../run/client"
            ideConfigGenerated = true
        }
        server {
            runDir = "../../run/server"
            ideConfigGenerated = true
        }
    }

    if (!isFabric)
        forge {
            mixinConfigs = [
                    "cobblegen.mixins.json"
            ]
        }
}

dependencies {
    minecraft "com.mojang:minecraft:${mcVersionStr}"

    mappings loom.officialMojangMappings()

    if (isFabric) {
        modImplementation "net.fabricmc:fabric-loader:0.14.21"

        modLocalRuntime modCompileOnlyApi("net.fabricmc.fabric-api:fabric-api:" + [
                11802: "0.76.0+1.18.2",
                11902: "0.76.0+1.19.2",
                11904: "0.83.0+1.19.4",
                12001: "0.83.1+1.20.1",
        ][mcVersion])
    } else {
        forge "net.minecraftforge:forge:" + [
                11802: "1.18.2-40.2.9",
        ][mcVersion]
    }

    shadow modImplementation("blue.endless:jankson:${project.jankson_version}")

    modCompileOnlyApi("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7")
    modCompileOnlyApi("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
    modCompileOnlyApi("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
    modCompileOnlyApi("dev.emi:emi:${project.emi_version}+${project.minecraft_version_1_18_2}:api")
    modCompileOnlyApi("me.shedaniel:RoughlyEnoughItems-api-fabric:$project.rei_version_1_18_2")
    modCompileOnlyApi("mezz.jei:${project.jei_version_1_18_2}") {
        transitive = false
    }
    if (mcVersion == 11802) {
        modLocalRuntime("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7")
        modLocalRuntime("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
        modLocalRuntime("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
        modLocalRuntime("dev.emi:emi:${project.emi_version}+${project.minecraft_version_1_18_2}:api")
    }

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

shadowJar {
    zip64 true
    relocate "blue.endless.jankson", "io.github.null2264.cobblegen.shadowed.blue.endless.jankson"
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadow]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

processResources {
    inputs.property "version", project.version
    inputs.property 'mcversion', { mcVersionStr }
    filteringCharset "UTF-8"

    filesMatching(["fabric.mod.json", "META-INF/mods.toml"]) {
        expand "version": project.version, 'mcversion': mcVersionStr
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

if (System.getenv("GITHUB_ENV")) {
    def envFile = new File(System.getenv("GITHUB_ENV"))
    envFile.append("VERSION=${version}")
}

/*
if (System.getenv("CURSEFORGE")) {
    def cfReleaseType = "release"
    if (ext.isAlpha) {
        cfReleaseType = "alpha"
    } else if (ext.isBeta) {
        cfReleaseType = "beta"
    }

    curseforge {
        apiKey = System.getenv("CURSEFORGE")
        project {
            id = project.curseforge_project
            changelogType = "markdown"
            changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/null2264/CobbleGen/releases) for a changelog"
            releaseType = cfReleaseType
            for (final def ver in project.cf_versions.split(",")) {
                addGameVersion ver
            }
            addGameVersion "Fabric"
            addGameVersion "Quilt"
            addGameVersion "Java 17"
            mainArtifact(remapJar.archiveFile) {
                displayName = "v${project.mod_version}-${project.version_stage}"
                relations {
                    embeddedLibrary "jankson"
                }
            }
        }
        options {
            forgeGradleIntegration = false
        }
        afterEvaluate {
            tasks.getByName("curseforge${project.curseforge_project}").dependsOn remapJar
        }
    }
}

if (System.getenv("MODRINTH")) {
    def mrReleaseType = "release"
    if (ext.isAlpha) {
        mrReleaseType = "alpha"
    } else if (ext.isBeta) {
        mrReleaseType = "beta"
    }

    modrinth {
        token = System.getenv("MODRINTH")
        changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/null2264/CobbleGen/releases) for a changelog"
        projectId = project.modrinth_project
        versionName = "v${project.mod_version}-${project.version_stage}"
        versionNumber = version as String
        versionType = mrReleaseType
        uploadFile = remapJar
        gameVersions = project.mr_versions.split(",").toList()
        loaders = [ "fabric", "quilt" ]
    }
}
 */