plugins {
    id 'fabric-loom' apply false
}

allprojects {
    apply plugin: 'fabric-loom'

    repositories {
        maven { url 'https://jitpack.io' }
        maven {
            name 'modmaven'
            url "https://modmaven.dev/"
            content {
                includeGroup "mezz.jei"
            }
        }
        maven {
            name "Shedaniel Maven"
            url "https://maven.shedaniel.me/"
        }
    }

    archivesBaseName = project.archives_base_name

    ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    version = "v${project.mod_version}" + (buildNumber != null ? "b${buildNumber}-" : "-") + project.version_stage

    group = project.maven_group

    dependencies {
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        include modImplementation("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
        annotationProcessor("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}")
        include modImplementation("blue.endless:jankson:${project.jankson_version}")
    }

    processResources {
        inputs.property "version", project.version
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand "version": project.version
        }
    }

    def targetJavaVersion = 17
    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            it.options.release = targetJavaVersion
        }
    }

    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${archivesBaseName}" }
        }
    }
}

subprojects {
    dependencies {
        implementation(project(path: ":", configuration: "namedElements")) {
            // having 2 floaders from the sub project and root project causes issues so we get rid of one.
            exclude group: "net.fabricmc", module: "fabric-loader"
        }
    }
}

dependencies {
    include project(path: ':cobblegen-1.18.2-compat', configuration: 'namedElements')
    include project(path: ':cobblegen-1.19.3-compat', configuration: 'namedElements')

    mappings loom.layered {
        officialMojangMappings()
        mappings "net.fabricmc:yarn:${project.yarn_mappings_1_19_2}:v2"
    }

    minecraft "com.mojang:minecraft:${project.minecraft_version_1_19_2}"

    modCompileOnly("mezz.jei:jei-1.19.2-fabric:${jei_version}")
}

processResources {
    from("${rootDir}/assets/icon.png") {
        into "assets/cobblegen/"
    }
}