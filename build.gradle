plugins {
    id "dev.architectury.loom" version "1.1-SNAPSHOT"
    id "com.github.johnrengelman.shadow"
    id "com.github.null2264.preprocess"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

def isFabric = project.name.endsWith("fabric")
def mcVersion
def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
static def String stringifyVersion(int ver) {
    return "${(int)(ver/10000)}.${(int)(ver/100)%100}" + (ver%100==0 ? '' : ".${ver%100}")
}
def mcVersionStr = stringifyVersion(mcVersion)
def supportedVersionRange = [
        11802: [null, "1.18.2"],
        11902: ["1.19", "1.19.2"],
        11904: ["1.19.3", "1.19.4"],
        12001: ["1.20", null],
][mcVersion]

preprocess {
    vars.put("MC", mcVersion)
    vars.put("FABRIC", isFabric ? 1 : 0)

    patternAnnotation.set("io.github.null2264.gradle.Pattern")
}

repositories {
    maven { url = "https://jitpack.io" }
    maven {
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/" }
    maven { url = "https://api.modrinth.com/maven/" }
    maven { url = "https://cursemaven.com/" }
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://maven.theillusivec4.top/" }
}

archivesBaseName = project.archives_base_name

ext.buildNumber = System.getenv("GITHUB_RUN_NUMBER")
project.version = project.mod_version + "mc${mcVersionStr}" + (buildNumber != null ? "+${buildNumber}-" : "-") + project.version_stage

ext.isAlpha = project.version_stage == "ALPHA"
ext.isBeta = project.version_stage == "BETA"

group = project.maven_group

loom {
    silentMojangMappingsLicense()

    mixin.defaultRefmapName.set("mixins.cobblegen.refmap.json")

    runConfigs.configure {
        client {
            runDir = "../../run/client"
            ideConfigGenerated = true
        }
        server {
            runDir = "../../run/server"
            ideConfigGenerated = true
        }
    }

    if (!isFabric)
        forge {
            mixinConfigs = [
                    "cobblegen.mixins.json"
            ]
        }
}

configurations {
    shade
    modImplementation.extendsFrom(shade)
}

dependencies {
    minecraft "com.mojang:minecraft:${mcVersionStr}"

    mappings loom.officialMojangMappings()

    if (isFabric) {
        modImplementation "net.fabricmc:fabric-loader:0.14.21"

        modLocalRuntime modCompileOnlyApi("net.fabricmc.fabric-api:fabric-api:" + [
                11802: "0.76.0+1.18.2",
                11902: "0.76.0+1.19.2",
                11904: "0.83.0+1.19.4",
                12001: "0.83.1+1.20.1",
        ][mcVersion])
    } else {
        forge "net.minecraftforge:forge:" + [
                11802: "1.18.2-40.2.9",
                11902: "1.19.2-43.2.14",
        ][mcVersion]
    }

    shade("blue.endless:jankson:${project.jankson_version}")
    if (!isFabric)
        forgeRuntimeLibrary("blue.endless:jankson:${project.jankson_version}")

    // These act like a dummy, technically only here to provide their modules/packages
    if (isFabric) {
        modCompileOnly("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7")
        modCompileOnly("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
        modCompileOnly("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
    } else {
        modCompileOnly("com.jozufozu.flywheel:flywheel-forge-1.18.2:0.6.8.a-99")
        modCompileOnly("com.simibubi.create:create-1.18.2:0.5.0.i-249:slim") { transitive = false }
        modCompileOnly("com.tterrag.registrate:Registrate:MC1.18.2-1.1.3")
    }

    // EMI
    if (mcVersion <= 11802 && isFabric) {
        modCompileOnly("dev.emi:emi:0.7.3+${mcVersionStr}:api")
        if (project.recipe_viewer == "emi")
            modLocalRuntime("dev.emi:emi:0.7.3+${mcVersionStr}")
    } else {
        // EMI support multiple platform since 1.0.0
        // EMI seems to also skip 1.19 and 1.19.1
        modCompileOnly("dev.emi:emi-${isFabric ? "fabric" : "forge"}:${project.emi_version}+${mcVersion >= 11902 ? mcVersionStr : '1.19.2'}:api")
        if (project.recipe_viewer == "emi")
            modLocalRuntime("dev.emi:emi-${isFabric ? "fabric" : "forge"}:${project.emi_version}+${mcVersion >= 11902 ? mcVersionStr : '1.19.2'}")
    }

    // REI
    def reiVersions = [
            11802: "8.3.618",
            11902: "9.1.619",
            11904: "11.0.621",
            12001: "12.0.625",
    ]
    if (isFabric)
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${reiVersions[mcVersion]}")
    else  // I need the full package since for whatever reason @REIPluginClient is not included in API, thanks REI
        modCompileOnly("me.shedaniel:RoughlyEnoughItems-forge:${reiVersions[mcVersion]}")
    if (project.recipe_viewer == "rei")
        modLocalRuntime("me.shedaniel:RoughlyEnoughItems-${isFabric ? "fabric" : "forge"}:${reiVersions[mcVersion]}")

    // JEI
    def jeiVersions = [
            11802: "10.2.1.1004",
            11902: "11.6.0.1015",
            11904: "13.1.0.13",
            12001: "15.0.0.12",
    ]
    modCompileOnly("mezz.jei:jei-${mcVersionStr}-common-api:${jeiVersions[mcVersion]}")
    modCompileOnly("mezz.jei:jei-${mcVersionStr}-${isFabric ? "fabric" : "forge"}-api:${jeiVersions[mcVersion]}")
    if (project.recipe_viewer == "jei")
        modLocalRuntime("mezz.jei:jei-${mcVersionStr}-${isFabric ? "fabric" : "forge"}:${jeiVersions[mcVersion]}")

    if (mcVersion == 11802 && isFabric) {
        modLocalRuntime("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7")
        modLocalRuntime("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version_1_18_2}")
        modLocalRuntime("com.simibubi.create:create-fabric-${project.minecraft_version_1_18_2}:${project.create_version_1_18_2}")
    }

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

shadowJar {
    zip64 true
    relocate "blue.endless.jankson", "io.github.null2264.shadowed.blue.endless.jankson"
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shade]
    archiveClassifier.set "dev-shade"
}

artifacts {
    archives shadowJar
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile
}

processResources {
    def metadataMCVersion =
            (isFabric ? ">=" : "[") +
            supportedVersionRange[0] +
            (supportedVersionRange[1] == null
                    ? (isFabric ? "" : ",)")
                    : ((isFabric ? ", " : ",") + supportedVersionRange[1] + (isFabric ? "" : "]")))
    inputs.property "version", project.version
    inputs.property "mcversion", metadataMCVersion
    filteringCharset "UTF-8"

    filesMatching(isFabric ? "fabric.mod.json" : "META-INF/mods.toml") {
        expand "version": project.version, 'mcversion': metadataMCVersion
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

if (System.getenv("GITHUB_ENV")) {
    def envFile = new File(System.getenv("GITHUB_ENV"))
    envFile.append("VERSION=${version}")
}

def _releaseType = "release"
if (ext.isAlpha) {
    _releaseType = "alpha"
} else if (ext.isBeta) {
    _releaseType = "beta"
}

unifiedPublishing {
    project {
        releaseType = _releaseType
        displayName = "v${project.mod_version}-${project.version_stage}"
        version = project.version as String
        changelog = System.getenv("CHANGELOG") ?: "Please visit our [releases](https://github.com/null2264/CobbleGen/releases) for a changelog"
        gameVersions = [
                11802: ["1.18.2"],
                11902: ["1.19", "1.19.1", "1.19.2"],
                11904: ["1.19.3", "1.19.4"],
                12000: ["1.20"],
        ][mcVersion]
        gameLoaders = isFabric ? ["fabric", "quilt"] : ["forge"]

        mainPublication tasks.remapJar

        relations {
            includes {
                curseforge = "jankson"
            }
        }

        var cfToken = System.getenv("CURSEFORGE")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = project.curseforge_project
            }
        }

        var mrToken = System.getenv("MODRINTH")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = project.modrinth_project
            }
        }
    }
}